#####################################################################
# Macros
#####################################################################
[gcode_macro _PREHEAT_STATUS]
variable_preheat_done: False
gcode:
   
[gcode_macro PRINT_START]
variable_pa_default: 0.035
variable_pa_abs: 0.030
variable_pa_petg: 0.07
variable_pa_pla: 0.05
variable_pa_pc: 0.025
variable_pa_asa: 0.04
variable_pa_nylon: 0.032

gcode:
    {% set FILAMENT = params.FILAMENT|default('Default')|string %}
	{% set MIN_TEMP = params.HOTEND|int * 0.9 %}
	{% set BED_TEMP = params.BED|default(70)|int %}
    {% set HOTEND_TEMP = params.HOTEND|default(210)|float %}
	{% set PREHEAT_DONE = printer["gcode_macro _PREHEAT_STATUS"].preheat_done | abs %}
    DUMP_PREHEAT_STATUS
    {% if params.FILAMENT == 'ABS' %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_abs}
        {% if PREHEAT_DONE == False %}
            PREHEAT
        {% endif %}

    {% elif params.FILAMENT == 'ASA' %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_asa}
        {% if PREHEAT_DONE == False %}
            PREHEAT
        {% endif %}

    {% elif params.FILAMENT == 'NYLON' %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_asa}
        {% if PREHEAT_DONE == False %}
            PREHEAT
        {% endif %}    
        
    {% elif params.FILAMENT == 'PC' %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_pc}
        {% if PREHEAT_DONE == False %}
            PREHEAT
        {% endif %}
		
    {% elif params.FILAMENT == 'PETG' %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_petg}
		
	{% elif params.FILAMENT == 'PLA' %}
		SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_pla}
		
	{% else %} # Default schleife, falls unbekannter filament typ.
		SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa_default}
	{% endif %}
    
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}   
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    M190 S{bedtemp}
    G90
    {% set hotendtemp = params.HOTEND|int %}
    M104 S{hotendtemp}
    G28    
    {% set hotendtemp = params.HOTEND|int %}
    M109 S{hotendtemp}
    SQUIGGLY_PURGE
    

[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 15, th.axis_maximum.z]|min %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END        
    G92 E0                         ; zero the extruder
    G1 E-30.0 F2000                 ; retract filament
    G92 E0
    G0 X 118 Y 118 Z{z_safe} F20000
    M400                           
    TURN_OFF_HEATERS
    G90                                     
    M107 ; turn off fan
    M84
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    SET_GCODE_VARIABLE MACRO=_PREHEAT_STATUS VARIABLE=preheat_done VALUE=False
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
        
[gcode_macro PID_EXTRUDER] 
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(260)|float %}
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  M106 S0
  #TURN_OFF_HEATERS SAVE_CONFIG

[gcode_macro PID_BED] 
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(110)|float %}
  BEDFANSFAST
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  BEDFANSOFF
  #TURN_OFF_HEATERS SAVE_CONFIG

  
[gcode_macro PREHEAT] 
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(35)|float %}
  {% set TARGET_BED = params.TARGET_BED|default(120)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={TARGET_BED}
  MR_NOTIFY TITLE="$printer_name" MESSAGE="Going hot!"
  G28
  M106 S255
  G0 X 60 Y 60 Z 30 F20000
  TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={TARGET_TEMP}
  M106 S0
  MR_NOTIFY TITLE="$printer_name" MESSAGE="Preheat is done, ready to go brrrr"
  SET_GCODE_VARIABLE MACRO=_PREHEAT_STATUS VARIABLE=preheat_done VALUE=True
  
[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
    G91
    G1  E50 F500
    G1  E50 F500
    G1  E25 F250
    G1  E-0.8 F250
    G90
    {action_respond_info("Filament loaded")}
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
    G91
    G92 E0                                                                      ; reset Extruder
    G0 E10 F360                                                                 ; extract a bit
    G0 E5 F2000                                                                 ; blob a bit
    G0 E-22 F2000                                                               ; forming filament Tip for Rapido 
    G0 E2 F300
    G0 E-2.1 F300
    G0 E2 F300
    G0 E-2.2 F300
    G0 E2 F300
    G0 E-2.3 F300
    G0 E2 F300
    G0 E-2.4 F300
    G0 E2 F300
    G0 E-2.5 F300
    G0 E2 F300
    G0 E-43 F300                                                                 ; Filament Tip cooldown till extruder gears for Rapido -> from ERCF V3 ercf_software.cfg 
    G0 E-100 F2000                                                              ; aaand puke it out fast
    G90
    {action_respond_info("Filament unloaded")}
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

[gcode_macro LOAD_BY_HAND]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_BY_HAND_state
    G91
    G1 E-.8 F2700
	G1 Z10
	G90
	G1 X5 Y5 F3000
	G91
    G1  E50 F500
    G1  E50 F500
    G1  E25 F250
    G1  E-5 F250
    G90
    RESTORE_GCODE_STATE NAME=LOAD_BY_HAND_state
    
[gcode_macro M600]
gcode:	
	SAVE_GCODE_STATE NAME=M600_state
    SET_FILAMENT_SENSOR SENSOR=Toolhead_Sensor ENABLE=0
	PAUSE
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Time for filament change!"
	G91
	G1 E-.8 F2700
	G90	
	UNLOAD_FILAMENT
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro DUMP_PREHEAT_STATUS]
gcode:
  {% set preheat_status = printer["gcode_macro _PREHEAT_STATUS"] %}
  { action_respond_info("Preheat done?: {}".format(preheat_status.preheat_done)) }

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}